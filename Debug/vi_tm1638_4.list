
vi_tm1638_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c20  08001c20  00011c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c50  08001c50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c50  08001c50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c50  08001c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001c64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001c64  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000036e9  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012ba  00000000  00000000  00023761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d0  00000000  00000000  00024a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000376  00000000  00000000  00024ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016624  00000000  00000000  00025266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005c9d  00000000  00000000  0003b88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f7f9  00000000  00000000  00041527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010e4  00000000  00000000  000c0d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c1e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c08 	.word	0x08001c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c08 	.word	0x08001c08

0800014c <TM1638_StartComunication>:
 ==================================================================================
 */

static inline void
TM1638_StartComunication(TM1638_Handler_t *Handler)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(0);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	69db      	ldr	r3, [r3, #28]
 8000158:	2000      	movs	r0, #0
 800015a:	4798      	blx	r3
}
 800015c:	bf00      	nop
 800015e:	3708      	adds	r7, #8
 8000160:	46bd      	mov	sp, r7
 8000162:	bd80      	pop	{r7, pc}

08000164 <TM1638_StopComunication>:

static inline void
TM1638_StopComunication(TM1638_Handler_t *Handler)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(1);
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	69db      	ldr	r3, [r3, #28]
 8000170:	2001      	movs	r0, #1
 8000172:	4798      	blx	r3
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}

0800017c <TM1638_WriteBytes>:

static void
TM1638_WriteBytes(TM1638_Handler_t *Handler,
                  const uint8_t *Data, uint8_t NumOfBytes)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	4613      	mov	r3, r2
 8000188:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j, Buff;

  Handler->DioConfigOut();
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	689b      	ldr	r3, [r3, #8]
 800018e:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 8000190:	2300      	movs	r3, #0
 8000192:	75bb      	strb	r3, [r7, #22]
 8000194:	e02b      	b.n	80001ee <TM1638_WriteBytes+0x72>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 8000196:	2300      	movs	r3, #0
 8000198:	75fb      	strb	r3, [r7, #23]
 800019a:	7dbb      	ldrb	r3, [r7, #22]
 800019c:	68ba      	ldr	r2, [r7, #8]
 800019e:	4413      	add	r3, r2
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	757b      	strb	r3, [r7, #21]
 80001a4:	e01d      	b.n	80001e2 <TM1638_WriteBytes+0x66>
    {
      Handler->ClkWrite(0);
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	2000      	movs	r0, #0
 80001ac:	4798      	blx	r3
      Handler->DelayUs(1);
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	6a1b      	ldr	r3, [r3, #32]
 80001b2:	2001      	movs	r0, #1
 80001b4:	4798      	blx	r3
      Handler->DioWrite(Buff & 0x01);
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	691b      	ldr	r3, [r3, #16]
 80001ba:	7d7a      	ldrb	r2, [r7, #21]
 80001bc:	f002 0201 	and.w	r2, r2, #1
 80001c0:	b2d2      	uxtb	r2, r2
 80001c2:	4610      	mov	r0, r2
 80001c4:	4798      	blx	r3
      Handler->ClkWrite(1);
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	2001      	movs	r0, #1
 80001cc:	4798      	blx	r3
      Handler->DelayUs(1);
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	6a1b      	ldr	r3, [r3, #32]
 80001d2:	2001      	movs	r0, #1
 80001d4:	4798      	blx	r3
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 80001d6:	7dfb      	ldrb	r3, [r7, #23]
 80001d8:	3301      	adds	r3, #1
 80001da:	75fb      	strb	r3, [r7, #23]
 80001dc:	7d7b      	ldrb	r3, [r7, #21]
 80001de:	085b      	lsrs	r3, r3, #1
 80001e0:	757b      	strb	r3, [r7, #21]
 80001e2:	7dfb      	ldrb	r3, [r7, #23]
 80001e4:	2b07      	cmp	r3, #7
 80001e6:	d9de      	bls.n	80001a6 <TM1638_WriteBytes+0x2a>
  for (j = 0; j < NumOfBytes; j++)
 80001e8:	7dbb      	ldrb	r3, [r7, #22]
 80001ea:	3301      	adds	r3, #1
 80001ec:	75bb      	strb	r3, [r7, #22]
 80001ee:	7dba      	ldrb	r2, [r7, #22]
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d3cf      	bcc.n	8000196 <TM1638_WriteBytes+0x1a>
    }
  }
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3718      	adds	r7, #24
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <TM1638_ReadBytes>:

static void
TM1638_ReadBytes(TM1638_Handler_t *Handler,
                 uint8_t *Data, uint8_t NumOfBytes)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4613      	mov	r3, r2
 800020c:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j, Buff;

  Handler->DioConfigIn();
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4798      	blx	r3

  Handler->DelayUs(5);
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	2005      	movs	r0, #5
 800021a:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 800021c:	2300      	movs	r3, #0
 800021e:	75bb      	strb	r3, [r7, #22]
 8000220:	e034      	b.n	800028c <TM1638_ReadBytes+0x8c>
  {
    for (i = 0, Buff = 0; i < 8; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	75fb      	strb	r3, [r7, #23]
 8000226:	2300      	movs	r3, #0
 8000228:	757b      	strb	r3, [r7, #21]
 800022a:	e020      	b.n	800026e <TM1638_ReadBytes+0x6e>
    {
      Handler->ClkWrite(0);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	2000      	movs	r0, #0
 8000232:	4798      	blx	r3
      Handler->DelayUs(1);
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	6a1b      	ldr	r3, [r3, #32]
 8000238:	2001      	movs	r0, #1
 800023a:	4798      	blx	r3
      Handler->ClkWrite(1);
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	2001      	movs	r0, #1
 8000242:	4798      	blx	r3
      Buff |= (Handler->DioRead() << i);
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4798      	blx	r3
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	fa02 f303 	lsl.w	r3, r2, r3
 8000254:	b25a      	sxtb	r2, r3
 8000256:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800025a:	4313      	orrs	r3, r2
 800025c:	b25b      	sxtb	r3, r3
 800025e:	757b      	strb	r3, [r7, #21]
      Handler->DelayUs(1);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	2001      	movs	r0, #1
 8000266:	4798      	blx	r3
    for (i = 0, Buff = 0; i < 8; i++)
 8000268:	7dfb      	ldrb	r3, [r7, #23]
 800026a:	3301      	adds	r3, #1
 800026c:	75fb      	strb	r3, [r7, #23]
 800026e:	7dfb      	ldrb	r3, [r7, #23]
 8000270:	2b07      	cmp	r3, #7
 8000272:	d9db      	bls.n	800022c <TM1638_ReadBytes+0x2c>
    }

    Data[j] = Buff;
 8000274:	7dbb      	ldrb	r3, [r7, #22]
 8000276:	68ba      	ldr	r2, [r7, #8]
 8000278:	4413      	add	r3, r2
 800027a:	7d7a      	ldrb	r2, [r7, #21]
 800027c:	701a      	strb	r2, [r3, #0]
    Handler->DelayUs(2);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6a1b      	ldr	r3, [r3, #32]
 8000282:	2002      	movs	r0, #2
 8000284:	4798      	blx	r3
  for (j = 0; j < NumOfBytes; j++)
 8000286:	7dbb      	ldrb	r3, [r7, #22]
 8000288:	3301      	adds	r3, #1
 800028a:	75bb      	strb	r3, [r7, #22]
 800028c:	7dba      	ldrb	r2, [r7, #22]
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	429a      	cmp	r2, r3
 8000292:	d3c6      	bcc.n	8000222 <TM1638_ReadBytes+0x22>
  }
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <TM1638_SetMultipleDisplayRegister>:

static void
TM1638_SetMultipleDisplayRegister(TM1638_Handler_t *Handler,
                                  const uint8_t *DigitData,
                                  uint8_t StartAddr, uint8_t Count)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	b086      	sub	sp, #24
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	60f8      	str	r0, [r7, #12]
 80002a6:	60b9      	str	r1, [r7, #8]
 80002a8:	4611      	mov	r1, r2
 80002aa:	461a      	mov	r2, r3
 80002ac:	460b      	mov	r3, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 80002b4:	2340      	movs	r3, #64	; 0x40
 80002b6:	75fb      	strb	r3, [r7, #23]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 80002b8:	68f8      	ldr	r0, [r7, #12]
 80002ba:	f7ff ff47 	bl	800014c <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 80002be:	f107 0317 	add.w	r3, r7, #23
 80002c2:	2201      	movs	r2, #1
 80002c4:	4619      	mov	r1, r3
 80002c6:	68f8      	ldr	r0, [r7, #12]
 80002c8:	f7ff ff58 	bl	800017c <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 80002cc:	68f8      	ldr	r0, [r7, #12]
 80002ce:	f7ff ff49 	bl	8000164 <TM1638_StopComunication>

  Data = AddressInstructionSet | StartAddr;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	75fb      	strb	r3, [r7, #23]

  TM1638_StartComunication(Handler);
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff35 	bl	800014c <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 80002e2:	f107 0317 	add.w	r3, r7, #23
 80002e6:	2201      	movs	r2, #1
 80002e8:	4619      	mov	r1, r3
 80002ea:	68f8      	ldr	r0, [r7, #12]
 80002ec:	f7ff ff46 	bl	800017c <TM1638_WriteBytes>
  TM1638_WriteBytes(Handler, DigitData, Count);
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	461a      	mov	r2, r3
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	68f8      	ldr	r0, [r7, #12]
 80002f8:	f7ff ff40 	bl	800017c <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 80002fc:	68f8      	ldr	r0, [r7, #12]
 80002fe:	f7ff ff31 	bl	8000164 <TM1638_StopComunication>
}
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <TM1638_ScanKeyRegs>:

static void
TM1638_ScanKeyRegs(TM1638_Handler_t *Handler, uint8_t *KeyRegs)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b084      	sub	sp, #16
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]
  uint8_t Data = DataInstructionSet | ReadKeyScanData |
 8000314:	2342      	movs	r3, #66	; 0x42
 8000316:	73fb      	strb	r3, [r7, #15]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff17 	bl	800014c <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 800031e:	f107 030f 	add.w	r3, r7, #15
 8000322:	2201      	movs	r2, #1
 8000324:	4619      	mov	r1, r3
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f7ff ff28 	bl	800017c <TM1638_WriteBytes>
  TM1638_ReadBytes(Handler, KeyRegs, 4);
 800032c:	2204      	movs	r2, #4
 800032e:	6839      	ldr	r1, [r7, #0]
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f7ff ff65 	bl	8000200 <TM1638_ReadBytes>
  TM1638_StopComunication(Handler);
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f7ff ff14 	bl	8000164 <TM1638_StopComunication>
}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <TM1638_Init>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful.
 */
TM1638_Result_t
TM1638_Init(TM1638_Handler_t *Handler, uint8_t Type)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
  Handler->DisplayType = TM1638DisplayTypeComCathode;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 // Handler->DisplayType = TM1638DisplayTypeComAnode;

#if TM1638_SUPPORT_COM_ANODE
  for (uint8_t i = 0; i < 16; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	73fb      	strb	r3, [r7, #15]
 800035c:	e008      	b.n	8000370 <TM1638_Init+0x2c>
  {
    Handler->DisplayRegister[i] = 0;
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  for (uint8_t i = 0; i < 16; i++)
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	3301      	adds	r3, #1
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	2b0f      	cmp	r3, #15
 8000374:	d9f3      	bls.n	800035e <TM1638_Init+0x1a>
  }
  if (Type == TM1638DisplayTypeComCathode)
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d104      	bne.n	8000386 <TM1638_Init+0x42>
    Handler->DisplayType = TM1638DisplayTypeComCathode;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000384:	e003      	b.n	800038e <TM1638_Init+0x4a>
  else
    Handler->DisplayType = TM1638DisplayTypeComAnode;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2201      	movs	r2, #1
 800038a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif

  Handler->PlatformInit();
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4798      	blx	r3
  return TM1638_OK;
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ConfigDisplay(TM1638_Handler_t *Handler,
                     uint8_t Brightness, uint8_t DisplayState)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b084      	sub	sp, #16
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	460b      	mov	r3, r1
 80003a8:	70fb      	strb	r3, [r7, #3]
 80003aa:	4613      	mov	r3, r2
 80003ac:	70bb      	strb	r3, [r7, #2]
  uint8_t Data = DisplayControlInstructionSet;
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	73fb      	strb	r3, [r7, #15]
  Data |= Brightness & 0x07;
 80003b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003b6:	f003 0307 	and.w	r3, r3, #7
 80003ba:	b25a      	sxtb	r2, r3
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	73fb      	strb	r3, [r7, #15]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 80003c8:	78bb      	ldrb	r3, [r7, #2]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <TM1638_ConfigDisplay+0x34>
 80003ce:	2208      	movs	r2, #8
 80003d0:	e000      	b.n	80003d4 <TM1638_ConfigDisplay+0x36>
 80003d2:	2200      	movs	r2, #0
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	b25b      	sxtb	r3, r3
 80003d8:	4313      	orrs	r3, r2
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	73fb      	strb	r3, [r7, #15]

  TM1638_StartComunication(Handler);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff feb3 	bl	800014c <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 80003e6:	f107 030f 	add.w	r3, r7, #15
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff fec4 	bl	800017c <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff feb5 	bl	8000164 <TM1638_StopComunication>

  return TM1638_OK;
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <TM1638_SetSingleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit(TM1638_Handler_t *Handler,
                      uint8_t DigitData, uint8_t DigitPos)
{ 
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
 8000410:	4613      	mov	r3, r2
 8000412:	70bb      	strb	r3, [r7, #2]
  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800041a:	2b00      	cmp	r3, #0
 800041c:	d106      	bne.n	800042c <TM1638_SetSingleDigit+0x28>
    TM1638_SetMultipleDisplayRegister(Handler, &DigitData, DigitPos, 1);
 800041e:	78ba      	ldrb	r2, [r7, #2]
 8000420:	1cf9      	adds	r1, r7, #3
 8000422:	2301      	movs	r3, #1
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff3a 	bl	800029e <TM1638_SetMultipleDisplayRegister>
 800042a:	e005      	b.n	8000438 <TM1638_SetSingleDigit+0x34>
#if (TM1638_SUPPORT_COM_ANODE)
  else
    TM1638_SetMultipleDigit(Handler, &DigitData, DigitPos, 1);
 800042c:	78ba      	ldrb	r2, [r7, #2]
 800042e:	1cf9      	adds	r1, r7, #3
 8000430:	2301      	movs	r3, #1
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 f805 	bl	8000442 <TM1638_SetMultipleDigit>
#endif
  return TM1638_OK;
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <TM1638_SetMultipleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetMultipleDigit(TM1638_Handler_t *Handler, const uint8_t *DigitData,
                        uint8_t StartAddr, uint8_t Count)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b086      	sub	sp, #24
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	4611      	mov	r1, r2
 800044e:	461a      	mov	r2, r3
 8000450:	460b      	mov	r3, r1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	4613      	mov	r3, r2
 8000456:	71bb      	strb	r3, [r7, #6]
  uint8_t Shift = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	75fb      	strb	r3, [r7, #23]
  uint8_t DigitDataBuff = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	75bb      	strb	r3, [r7, #22]
  uint8_t i = 0, j = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	757b      	strb	r3, [r7, #21]
 8000464:	2300      	movs	r3, #0
 8000466:	753b      	strb	r3, [r7, #20]

  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800046e:	2b00      	cmp	r3, #0
 8000470:	d106      	bne.n	8000480 <TM1638_SetMultipleDigit+0x3e>
    TM1638_SetMultipleDisplayRegister(Handler, DigitData, StartAddr, Count);
 8000472:	79bb      	ldrb	r3, [r7, #6]
 8000474:	79fa      	ldrb	r2, [r7, #7]
 8000476:	68b9      	ldr	r1, [r7, #8]
 8000478:	68f8      	ldr	r0, [r7, #12]
 800047a:	f7ff ff10 	bl	800029e <TM1638_SetMultipleDisplayRegister>
 800047e:	e071      	b.n	8000564 <TM1638_SetMultipleDigit+0x122>
#if (TM1638_SUPPORT_COM_ANODE)
  else
  {
    for (j = 0; j < Count; j++)
 8000480:	2300      	movs	r3, #0
 8000482:	753b      	strb	r3, [r7, #20]
 8000484:	e062      	b.n	800054c <TM1638_SetMultipleDigit+0x10a>
    {
      DigitDataBuff = DigitData[j];
 8000486:	7d3b      	ldrb	r3, [r7, #20]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	4413      	add	r3, r2
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	75bb      	strb	r3, [r7, #22]

      if ((j + StartAddr) >= 0 && (j + StartAddr) <= 7)
 8000490:	7d3a      	ldrb	r2, [r7, #20]
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4413      	add	r3, r2
 8000496:	2b07      	cmp	r3, #7
 8000498:	dc06      	bgt.n	80004a8 <TM1638_SetMultipleDigit+0x66>
      {
        Shift = j + StartAddr;
 800049a:	7d3a      	ldrb	r2, [r7, #20]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4413      	add	r3, r2
 80004a0:	75fb      	strb	r3, [r7, #23]
        i = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	757b      	strb	r3, [r7, #21]
 80004a6:	e04b      	b.n	8000540 <TM1638_SetMultipleDigit+0xfe>
      }
      else if ((j + StartAddr) == 8 || (j + StartAddr) == 9)
 80004a8:	7d3a      	ldrb	r2, [r7, #20]
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4413      	add	r3, r2
 80004ae:	2b08      	cmp	r3, #8
 80004b0:	d004      	beq.n	80004bc <TM1638_SetMultipleDigit+0x7a>
 80004b2:	7d3a      	ldrb	r2, [r7, #20]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4413      	add	r3, r2
 80004b8:	2b09      	cmp	r3, #9
 80004ba:	d108      	bne.n	80004ce <TM1638_SetMultipleDigit+0x8c>
      {
        Shift = (j + StartAddr) - 8;
 80004bc:	7d3a      	ldrb	r2, [r7, #20]
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	4413      	add	r3, r2
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	3b08      	subs	r3, #8
 80004c6:	75fb      	strb	r3, [r7, #23]
        i = 1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	757b      	strb	r3, [r7, #21]
 80004cc:	e001      	b.n	80004d2 <TM1638_SetMultipleDigit+0x90>
      }
      else
      {
        i = 16;
 80004ce:	2310      	movs	r3, #16
 80004d0:	757b      	strb	r3, [r7, #21]
      }

      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 80004d2:	e035      	b.n	8000540 <TM1638_SetMultipleDigit+0xfe>
      {
        if (DigitDataBuff & 0x01)
 80004d4:	7dbb      	ldrb	r3, [r7, #22]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d014      	beq.n	8000508 <TM1638_SetMultipleDigit+0xc6>
          Handler->DisplayRegister[i] |= (1 << Shift);
 80004de:	7d7b      	ldrb	r3, [r7, #21]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4413      	add	r3, r2
 80004e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80004e8:	b25a      	sxtb	r2, r3
 80004ea:	7dfb      	ldrb	r3, [r7, #23]
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	4313      	orrs	r3, r2
 80004f6:	b25a      	sxtb	r2, r3
 80004f8:	7d7b      	ldrb	r3, [r7, #21]
 80004fa:	b2d1      	uxtb	r1, r2
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	4413      	add	r3, r2
 8000500:	460a      	mov	r2, r1
 8000502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000506:	e015      	b.n	8000534 <TM1638_SetMultipleDigit+0xf2>
        else
          Handler->DisplayRegister[i] &= ~(1 << Shift);
 8000508:	7d7b      	ldrb	r3, [r7, #21]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000512:	b25a      	sxtb	r2, r3
 8000514:	7dfb      	ldrb	r3, [r7, #23]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	b25b      	sxtb	r3, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4013      	ands	r3, r2
 8000524:	b25a      	sxtb	r2, r3
 8000526:	7d7b      	ldrb	r3, [r7, #21]
 8000528:	b2d1      	uxtb	r1, r2
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	460a      	mov	r2, r1
 8000530:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 8000534:	7d7b      	ldrb	r3, [r7, #21]
 8000536:	3302      	adds	r3, #2
 8000538:	757b      	strb	r3, [r7, #21]
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	085b      	lsrs	r3, r3, #1
 800053e:	75bb      	strb	r3, [r7, #22]
 8000540:	7d7b      	ldrb	r3, [r7, #21]
 8000542:	2b0f      	cmp	r3, #15
 8000544:	d9c6      	bls.n	80004d4 <TM1638_SetMultipleDigit+0x92>
    for (j = 0; j < Count; j++)
 8000546:	7d3b      	ldrb	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	753b      	strb	r3, [r7, #20]
 800054c:	7d3a      	ldrb	r2, [r7, #20]
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	429a      	cmp	r2, r3
 8000552:	d398      	bcc.n	8000486 <TM1638_SetMultipleDigit+0x44>
      }
    }
    TM1638_SetMultipleDisplayRegister(Handler, Handler->DisplayRegister, 0, 16);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800055a:	2310      	movs	r3, #16
 800055c:	2200      	movs	r2, #0
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f7ff fe9d 	bl	800029e <TM1638_SetMultipleDisplayRegister>
  }
#endif

  return TM1638_OK;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <TM1638_SetSingleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetSingleDigit_HEX(TM1638_Handler_t *Handler,
                          uint8_t DigitData, uint8_t DigitPos)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
 800057c:	4613      	mov	r3, r2
 800057e:	70bb      	strb	r3, [r7, #2]
  uint8_t DigitDataHEX = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
  uint8_t DecimalPoint = DigitData & 0x80;
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800058a:	73bb      	strb	r3, [r7, #14]

  DigitData &= 0x7F;
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000592:	70fb      	strb	r3, [r7, #3]

  if (DigitData <= 15)
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b0f      	cmp	r3, #15
 8000598:	d806      	bhi.n	80005a8 <TM1638_SetSingleDigit_HEX+0x38>
  {
    DigitDataHEX = HexTo7Seg[DigitData] | DecimalPoint;
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <TM1638_SetSingleDigit_HEX+0x144>)
 800059e:	5cd2      	ldrb	r2, [r2, r3]
 80005a0:	7bbb      	ldrb	r3, [r7, #14]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	e07a      	b.n	800069e <TM1638_SetSingleDigit_HEX+0x12e>
  }
  else
  {
    switch (DigitData)
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	3b41      	subs	r3, #65	; 0x41
 80005ac:	2b25      	cmp	r3, #37	; 0x25
 80005ae:	d873      	bhi.n	8000698 <TM1638_SetSingleDigit_HEX+0x128>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <TM1638_SetSingleDigit_HEX+0x48>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	08000651 	.word	0x08000651
 80005bc:	0800065d 	.word	0x0800065d
 80005c0:	08000669 	.word	0x08000669
 80005c4:	08000675 	.word	0x08000675
 80005c8:	08000681 	.word	0x08000681
 80005cc:	0800068d 	.word	0x0800068d
 80005d0:	08000699 	.word	0x08000699
 80005d4:	08000699 	.word	0x08000699
 80005d8:	08000699 	.word	0x08000699
 80005dc:	08000699 	.word	0x08000699
 80005e0:	08000699 	.word	0x08000699
 80005e4:	08000699 	.word	0x08000699
 80005e8:	08000699 	.word	0x08000699
 80005ec:	08000699 	.word	0x08000699
 80005f0:	08000699 	.word	0x08000699
 80005f4:	08000699 	.word	0x08000699
 80005f8:	08000699 	.word	0x08000699
 80005fc:	08000699 	.word	0x08000699
 8000600:	08000699 	.word	0x08000699
 8000604:	08000699 	.word	0x08000699
 8000608:	08000699 	.word	0x08000699
 800060c:	08000699 	.word	0x08000699
 8000610:	08000699 	.word	0x08000699
 8000614:	08000699 	.word	0x08000699
 8000618:	08000699 	.word	0x08000699
 800061c:	08000699 	.word	0x08000699
 8000620:	08000699 	.word	0x08000699
 8000624:	08000699 	.word	0x08000699
 8000628:	08000699 	.word	0x08000699
 800062c:	08000699 	.word	0x08000699
 8000630:	08000699 	.word	0x08000699
 8000634:	08000699 	.word	0x08000699
 8000638:	08000651 	.word	0x08000651
 800063c:	0800065d 	.word	0x0800065d
 8000640:	08000669 	.word	0x08000669
 8000644:	08000675 	.word	0x08000675
 8000648:	08000681 	.word	0x08000681
 800064c:	0800068d 	.word	0x0800068d
    {
    case 'A':
    case 'a':
      DigitDataHEX = HexTo7Seg[0x0A] | DecimalPoint;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <TM1638_SetSingleDigit_HEX+0x144>)
 8000652:	7a9a      	ldrb	r2, [r3, #10]
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	73fb      	strb	r3, [r7, #15]
      break;
 800065a:	e020      	b.n	800069e <TM1638_SetSingleDigit_HEX+0x12e>

    case 'B':
    case 'b':
      DigitDataHEX = HexTo7Seg[0x0B] | DecimalPoint;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <TM1638_SetSingleDigit_HEX+0x144>)
 800065e:	7ada      	ldrb	r2, [r3, #11]
 8000660:	7bbb      	ldrb	r3, [r7, #14]
 8000662:	4313      	orrs	r3, r2
 8000664:	73fb      	strb	r3, [r7, #15]
      break;
 8000666:	e01a      	b.n	800069e <TM1638_SetSingleDigit_HEX+0x12e>

    case 'C':
    case 'c':
      DigitDataHEX = HexTo7Seg[0x0C] | DecimalPoint;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <TM1638_SetSingleDigit_HEX+0x144>)
 800066a:	7b1a      	ldrb	r2, [r3, #12]
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	4313      	orrs	r3, r2
 8000670:	73fb      	strb	r3, [r7, #15]
      break;
 8000672:	e014      	b.n	800069e <TM1638_SetSingleDigit_HEX+0x12e>

    case 'D':
    case 'd':
      DigitDataHEX = HexTo7Seg[0x0D] | DecimalPoint;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <TM1638_SetSingleDigit_HEX+0x144>)
 8000676:	7b5a      	ldrb	r2, [r3, #13]
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	4313      	orrs	r3, r2
 800067c:	73fb      	strb	r3, [r7, #15]
      break;
 800067e:	e00e      	b.n	800069e <TM1638_SetSingleDigit_HEX+0x12e>

    case 'E':
    case 'e':
      DigitDataHEX = HexTo7Seg[0x0E] | DecimalPoint;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <TM1638_SetSingleDigit_HEX+0x144>)
 8000682:	7b9a      	ldrb	r2, [r3, #14]
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	4313      	orrs	r3, r2
 8000688:	73fb      	strb	r3, [r7, #15]
      break;
 800068a:	e008      	b.n	800069e <TM1638_SetSingleDigit_HEX+0x12e>

    case 'F':
    case 'f':
      DigitDataHEX = HexTo7Seg[0x0F] | DecimalPoint;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <TM1638_SetSingleDigit_HEX+0x144>)
 800068e:	7bda      	ldrb	r2, [r3, #15]
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	4313      	orrs	r3, r2
 8000694:	73fb      	strb	r3, [r7, #15]
      break;
 8000696:	e002      	b.n	800069e <TM1638_SetSingleDigit_HEX+0x12e>

    default:
      DigitDataHEX = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
      break;
 800069c:	bf00      	nop
    }
  }

  return TM1638_SetSingleDigit(Handler, DigitDataHEX, DigitPos);
 800069e:	78ba      	ldrb	r2, [r7, #2]
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fead 	bl	8000404 <TM1638_SetSingleDigit>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08001c20 	.word	0x08001c20

080006b8 <TM1638_ScanKeys>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ScanKeys(TM1638_Handler_t *Handler, uint32_t *Keys)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  uint8_t KeyRegs[4];
  uint32_t KeysBuff = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  uint8_t Kn = 0x01;
 80006c6:	2301      	movs	r3, #1
 80006c8:	74fb      	strb	r3, [r7, #19]

  TM1638_ScanKeyRegs(Handler, KeyRegs);
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fe1a 	bl	800030a <TM1638_ScanKeyRegs>

  for (uint8_t i = 0; i < 3; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	74bb      	strb	r3, [r7, #18]
 80006da:	e037      	b.n	800074c <TM1638_ScanKeys+0x94>
  {
    for (int8_t i = 3; i >= 0; i--)
 80006dc:	2303      	movs	r3, #3
 80006de:	747b      	strb	r3, [r7, #17]
 80006e0:	e02a      	b.n	8000738 <TM1638_ScanKeys+0x80>
    {
      KeysBuff <<= 1;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	617b      	str	r3, [r7, #20]

      if (KeyRegs[i] & (Kn << 4))
 80006e8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80006ec:	3318      	adds	r3, #24
 80006ee:	443b      	add	r3, r7
 80006f0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006f4:	461a      	mov	r2, r3
 80006f6:	7cfb      	ldrb	r3, [r7, #19]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4013      	ands	r3, r2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <TM1638_ScanKeys+0x50>
        KeysBuff |= 1;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	617b      	str	r3, [r7, #20]

      KeysBuff <<= 1;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	617b      	str	r3, [r7, #20]

      if (KeyRegs[i] & Kn)
 800070e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000712:	3318      	adds	r3, #24
 8000714:	443b      	add	r3, r7
 8000716:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800071a:	7cfb      	ldrb	r3, [r7, #19]
 800071c:	4013      	ands	r3, r2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <TM1638_ScanKeys+0x74>
        KeysBuff |= 1;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	617b      	str	r3, [r7, #20]
    for (int8_t i = 3; i >= 0; i--)
 800072c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	747b      	strb	r3, [r7, #17]
 8000738:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800073c:	2b00      	cmp	r3, #0
 800073e:	dad0      	bge.n	80006e2 <TM1638_ScanKeys+0x2a>
    }

    Kn <<= 1;
 8000740:	7cfb      	ldrb	r3, [r7, #19]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	74fb      	strb	r3, [r7, #19]
  for (uint8_t i = 0; i < 3; i++)
 8000746:	7cbb      	ldrb	r3, [r7, #18]
 8000748:	3301      	adds	r3, #1
 800074a:	74bb      	strb	r3, [r7, #18]
 800074c:	7cbb      	ldrb	r3, [r7, #18]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d9c4      	bls.n	80006dc <TM1638_ScanKeys+0x24>
  }

  *Keys = KeysBuff;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	601a      	str	r2, [r3, #0]

  return TM1638_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <TM1638_SetGPIO_OUT>:
 ==================================================================================
 */

#if defined(TM1638_PLATFORM_STM32)
void TM1638_SetGPIO_OUT(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4619      	mov	r1, r3
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 fc7b 	bl	800108c <HAL_GPIO_Init>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <TM1638_SetGPIO_IN_PU>:
									
void TM1638_SetGPIO_IN_PU(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007be:	2301      	movs	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2302      	movs	r3, #2
 80007c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fc5d 	bl	800108c <HAL_GPIO_Init>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <TM1638_PlatformInit>:
}
#endif

static void
TM1638_PlatformInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
#if defined(TM1638_PLATFORM_AVR)
  TM1638_CLK_DDR |= (1<<TM1638_CLK_NUM);
  TM1638_DIO_DDR |= (1<<TM1638_DIO_NUM);
  TM1638_STB_DDR |= (1<<TM1638_STB_NUM);
#elif defined(TM1638_PLATFORM_STM32)
  TM1638_SetGPIO_OUT(TM1638_CLK_GPIO, TM1638_CLK_PIN);
 80007e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <TM1638_PlatformInit+0x30>)
 80007e6:	f7ff ffbc 	bl	8000762 <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_STB_GPIO, TM1638_STB_PIN);
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <TM1638_PlatformInit+0x34>)
 80007ee:	f7ff ffb8 	bl	8000762 <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <TM1638_PlatformInit+0x38>)
 80007f8:	f7ff ffb3 	bl	8000762 <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(LED_GPIO, LED_PIN);
 80007fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <TM1638_PlatformInit+0x38>)
 8000802:	f7ff ffae 	bl	8000762 <TM1638_SetGPIO_OUT>
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  TM1638_SetGPIO_OUT(TM1638_CLK_GPIO);
  TM1638_SetGPIO_OUT(TM1638_STB_GPIO);
#endif
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40010c00 	.word	0x40010c00
 8000810:	40010800 	.word	0x40010800
 8000814:	40011000 	.word	0x40011000

08000818 <TM1638_PlatformDeInit>:

static void
TM1638_PlatformDeInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  gpio_reset_pin(TM1638_CLK_GPIO);
  gpio_reset_pin(TM1638_STB_GPIO);
  gpio_reset_pin(TM1638_DIO_GPIO);
#endif
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <TM1638_DioConfigOut>:

static void
TM1638_DioConfigOut(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
#if defined(TM1638_PLATFORM_AVR)
  TM1638_DIO_DDR |= (1<<TM1638_DIO_NUM);
#elif defined(TM1638_PLATFORM_STM32)
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <TM1638_DioConfigOut+0x14>)
 800082e:	f7ff ff98 	bl	8000762 <TM1638_SetGPIO_OUT>
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO);
#endif
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40011000 	.word	0x40011000

0800083c <TM1638_DioConfigIn>:

static void
TM1638_DioConfigIn(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
#if defined(TM1638_PLATFORM_AVR)
  TM1638_DIO_DDR &= ~(1<<TM1638_DIO_NUM);
#elif defined(TM1638_PLATFORM_STM32)
  TM1638_SetGPIO_IN_PU(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <TM1638_DioConfigIn+0x14>)
 8000846:	f7ff ffaa 	bl	800079e <TM1638_SetGPIO_IN_PU>
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  TM1638_SetGPIO_IN_PU(TM1638_DIO_GPIO);
#endif
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40011000 	.word	0x40011000

08000854 <TM1638_DioWrite>:

static void
TM1638_DioWrite(uint8_t Level)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  if (Level)
    TM1638_DIO_PORT |= (1<<TM1638_DIO_NUM);
  else
    TM1638_DIO_PORT &= ~(1<<TM1638_DIO_NUM);
#elif defined(TM1638_PLATFORM_STM32)
  HAL_GPIO_WritePin(TM1638_DIO_GPIO, TM1638_DIO_PIN, Level);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	461a      	mov	r2, r3
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <TM1638_DioWrite+0x20>)
 8000868:	f000 fdab 	bl	80013c2 <HAL_GPIO_WritePin>
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  gpio_set_level(TM1638_DIO_GPIO, Level);
#endif
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40011000 	.word	0x40011000

08000878 <TM1638_DioRead>:

static uint8_t
TM1638_DioRead(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  uint8_t Result = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	71fb      	strb	r3, [r7, #7]
#if defined(TM1638_PLATFORM_AVR)
  Result = (TM1638_DIO_PIN & (1 << TM1638_DIO_NUM)) ? 1 : 0;
#elif defined(TM1638_PLATFORM_STM32)
  Result = HAL_GPIO_ReadPin(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8000882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <TM1638_DioRead+0x24>)
 8000888:	f000 fd84 	bl	8001394 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  Result = gpio_get_level(TM1638_DIO_GPIO);
#endif
  return Result;
 8000890:	79fb      	ldrb	r3, [r7, #7]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40011000 	.word	0x40011000

080008a0 <TM1638_ClkWrite>:

static void
TM1638_ClkWrite(uint8_t Level)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if (Level)
    TM1638_CLK_PORT |= (1<<TM1638_CLK_NUM);
  else
    TM1638_CLK_PORT &= ~(1<<TM1638_CLK_NUM);
#elif defined(TM1638_PLATFORM_STM32)
  HAL_GPIO_WritePin(TM1638_CLK_GPIO, TM1638_CLK_PIN, Level);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	461a      	mov	r2, r3
 80008ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <TM1638_ClkWrite+0x20>)
 80008b4:	f000 fd85 	bl	80013c2 <HAL_GPIO_WritePin>
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  gpio_set_level(TM1638_CLK_GPIO, Level);
#endif
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <TM1638_StbWrite>:

static void
TM1638_StbWrite(uint8_t Level)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  if (Level)
    TM1638_STB_PORT |= (1<<TM1638_STB_NUM);
  else
    TM1638_STB_PORT &= ~(1<<TM1638_STB_NUM);
#elif defined(TM1638_PLATFORM_STM32)
  HAL_GPIO_WritePin(TM1638_STB_GPIO, TM1638_STB_PIN, Level);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	461a      	mov	r2, r3
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <TM1638_StbWrite+0x20>)
 80008d6:	f000 fd74 	bl	80013c2 <HAL_GPIO_WritePin>
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  gpio_set_level(TM1638_STB_GPIO, Level);
#endif
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010800 	.word	0x40010800

080008e8 <TM1638_DelayUs>:

static void
TM1638_DelayUs(uint8_t Delay)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
#if defined(TM1638_PLATFORM_AVR)
  for (; Delay; --Delay)
    _delay_us(1);
#elif defined(TM1638_PLATFORM_STM32)
  for (uint32_t DelayCounter = 0; DelayCounter < 100 * Delay; DelayCounter++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e002      	b.n	80008fe <TM1638_DelayUs+0x16>
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2264      	movs	r2, #100	; 0x64
 8000902:	fb02 f303 	mul.w	r3, r2, r3
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4293      	cmp	r3, r2
 800090c:	d3f4      	bcc.n	80008f8 <TM1638_DelayUs+0x10>
    DelayCounter = DelayCounter;
#elif defined(TM1638_PLATFORM_ESP32_IDF)
  ets_delay_us(Delay);
#endif
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <TM1638_Platform_Init>:
 * @param  Handler: Pointer to handler
 * @retval None
 */
void
TM1638_Platform_Init(TM1638_Handler_t *Handler)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  Handler->PlatformInit = TM1638_PlatformInit;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <TM1638_Platform_Init+0x48>)
 8000928:	601a      	str	r2, [r3, #0]
  Handler->PlatformDeInit = TM1638_PlatformDeInit;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <TM1638_Platform_Init+0x4c>)
 800092e:	605a      	str	r2, [r3, #4]
  Handler->DioConfigOut = TM1638_DioConfigOut;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <TM1638_Platform_Init+0x50>)
 8000934:	609a      	str	r2, [r3, #8]
  Handler->DioConfigIn = TM1638_DioConfigIn;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <TM1638_Platform_Init+0x54>)
 800093a:	60da      	str	r2, [r3, #12]
  Handler->DioWrite = TM1638_DioWrite;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <TM1638_Platform_Init+0x58>)
 8000940:	611a      	str	r2, [r3, #16]
  Handler->DioRead = TM1638_DioRead;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <TM1638_Platform_Init+0x5c>)
 8000946:	615a      	str	r2, [r3, #20]
  Handler->ClkWrite = TM1638_ClkWrite;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <TM1638_Platform_Init+0x60>)
 800094c:	619a      	str	r2, [r3, #24]
  Handler->StbWrite = TM1638_StbWrite;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <TM1638_Platform_Init+0x64>)
 8000952:	61da      	str	r2, [r3, #28]
  Handler->DelayUs = TM1638_DelayUs;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <TM1638_Platform_Init+0x68>)
 8000958:	621a      	str	r2, [r3, #32]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	080007dd 	.word	0x080007dd
 8000968:	08000819 	.word	0x08000819
 800096c:	08000825 	.word	0x08000825
 8000970:	0800083d 	.word	0x0800083d
 8000974:	08000855 	.word	0x08000855
 8000978:	08000879 	.word	0x08000879
 800097c:	080008a1 	.word	0x080008a1
 8000980:	080008c5 	.word	0x080008c5
 8000984:	080008e9 	.word	0x080008e9

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b092      	sub	sp, #72	; 0x48
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fa13 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f8bb 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f000 f8ff 	bl	8000b98 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  TM1638_Handler_t Handler;

  	  TM1638_Platform_Init(&Handler);
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffbc 	bl	800091c <TM1638_Platform_Init>
  	 TM1638_Init(&Handler, TM1638DisplayTypeComCathode);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fcca 	bl	8000344 <TM1638_Init>
  	//TM1638_Init(&Handler,TM1638DisplayTypeComAnode);
  	  TM1638_ConfigDisplay(&Handler, 1, TM1638DisplayStateOFF);
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	2101      	movs	r1, #1
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fcf0 	bl	800039e <TM1638_ConfigDisplay>
  	  HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f000 fa5c 	bl	8000e7c <HAL_Delay>
  	TM1638_ConfigDisplay(&Handler, 7, TM1638DisplayStateON);
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2201      	movs	r2, #1
 80009ca:	2107      	movs	r1, #7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fce6 	bl	800039e <TM1638_ConfigDisplay>
  	 TM1638_SetSingleDigit_HEX(&Handler, 0, 2);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2202      	movs	r2, #2
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fdc8 	bl	8000570 <TM1638_SetSingleDigit_HEX>
  		     HAL_Delay(100);
 80009e0:	2064      	movs	r0, #100	; 0x64
 80009e2:	f000 fa4b 	bl	8000e7c <HAL_Delay>
  		     TM1638_SetSingleDigit_HEX(&Handler, 0, 4);
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	2204      	movs	r2, #4
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fdbe 	bl	8000570 <TM1638_SetSingleDigit_HEX>
 //uint8_t d=112;
  	 uint8_t i=0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  	uint32_t keys = 0,sw1,sw2,sw3,sw4,sw5,sw6,sw7;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  	int status =0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
else if(scan_ref==sw6)
	TM1638_SetSingleDigit_HEX(&Handler, 6, 0);

else if(scan_ref==sw7)
	TM1638_SetSingleDigit_HEX(&Handler, 7, 0);*/
  	TM1638_SetSingleDigit_HEX(&Handler, 0, 0);
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fdb0 	bl	8000570 <TM1638_SetSingleDigit_HEX>

    /* USER CODE BEGIN 3 */
	  // Display the number 8 and Decimal Point in the SEG1
	  //TM1638_SetMultipleDigit(&Handler, test , 0,15);
	  //TM1638_SetSingleDigit_HEX(&Handler, 0, 1);
	   for (i = 0; i < 9; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000a16:	e074      	b.n	8000b02 <main+0x17a>
		  // TM1638_ConfigDisplay(&Handler, 7, TM1638DisplayStateON);
		  // HAL_Delay(1000);
	   //TM1638_SetSingleDigit_HEX(&Handler, i, 0);
	     HAL_Delay(100);
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f000 fa2f 	bl	8000e7c <HAL_Delay>
	     /*TM1638_SetSingleDigit_HEX(&Handler, i, 2);
	     HAL_Delay(100);
	     TM1638_SetSingleDigit_HEX(&Handler, i, 4);*/

	     status = TM1638_ScanKeys(&Handler,&keys);
 8000a1e:	1d3a      	adds	r2, r7, #4
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe46 	bl	80006b8 <TM1638_ScanKeys>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
	    // status&=0x0000000F;
	     if ((status==0)&& (keys == 1)) {
 8000a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10a      	bne.n	8000a4c <main+0xc4>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d107      	bne.n	8000a4c <main+0xc4>
	            // Display or use the scanned keys
	    	// HAL_GPIO_TogglePin(GPIOC, LED_PIN);
	    	 TM1638_SetSingleDigit_HEX(&Handler, 1, 0);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fd93 	bl	8000570 <TM1638_SetSingleDigit_HEX>
 8000a4a:	e052      	b.n	8000af2 <main+0x16a>

	    	// TM1638_SetSingleDigit_HEX(&Handler, 2, 0);
	          //  printf("Scanned keys: %d\n", keys);
	        } else if((status==0)&& (keys == 2))
 8000a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10a      	bne.n	8000a68 <main+0xe0>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d107      	bne.n	8000a68 <main+0xe0>
			{

	        	 TM1638_SetSingleDigit_HEX(&Handler, 2, 0);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fd85 	bl	8000570 <TM1638_SetSingleDigit_HEX>
 8000a66:	e044      	b.n	8000af2 <main+0x16a>

	        	// TM1638_SetSingleDigit_HEX(&Handler, ' ', 0);
	        	// printf("Error scanning keys!\n");
	        }
	        else if ((status==0)&& (keys == 8)) {
 8000a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10a      	bne.n	8000a84 <main+0xfc>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d107      	bne.n	8000a84 <main+0xfc>
	            // Display or use the scanned keys
	    	// HAL_GPIO_TogglePin(GPIOC, LED_PIN);
	    	 TM1638_SetSingleDigit_HEX(&Handler, 3, 0);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd77 	bl	8000570 <TM1638_SetSingleDigit_HEX>
 8000a82:	e036      	b.n	8000af2 <main+0x16a>

	    	// TM1638_SetSingleDigit_HEX(&Handler, 2, 0);
	          //  printf("Scanned keys: %d\n", keys);
	        } else if((status==0)&& (keys == 4))
 8000a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10a      	bne.n	8000aa0 <main+0x118>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d107      	bne.n	8000aa0 <main+0x118>
			{

	        	 TM1638_SetSingleDigit_HEX(&Handler, 4, 0);
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	2200      	movs	r2, #0
 8000a96:	2104      	movs	r1, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fd69 	bl	8000570 <TM1638_SetSingleDigit_HEX>
 8000a9e:	e028      	b.n	8000af2 <main+0x16a>

	        	// TM1638_SetSingleDigit_HEX(&Handler, ' ', 0);
	        	// printf("Error scanning keys!\n");
	        }
	        else if ((status==0)&& (keys == 16)) {
 8000aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10a      	bne.n	8000abc <main+0x134>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b10      	cmp	r3, #16
 8000aaa:	d107      	bne.n	8000abc <main+0x134>
	        	            // Display or use the scanned keys
	        	    	// HAL_GPIO_TogglePin(GPIOC, LED_PIN);
	        	    	 TM1638_SetSingleDigit_HEX(&Handler, 5, 0);
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd5b 	bl	8000570 <TM1638_SetSingleDigit_HEX>
 8000aba:	e01a      	b.n	8000af2 <main+0x16a>

	        	    	// TM1638_SetSingleDigit_HEX(&Handler, 2, 0);
	        	          //  printf("Scanned keys: %d\n", keys);
	        	        } else if((status==0)&& (keys == 32))
 8000abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10a      	bne.n	8000ad8 <main+0x150>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b20      	cmp	r3, #32
 8000ac6:	d107      	bne.n	8000ad8 <main+0x150>
	        			{

	        	        	 TM1638_SetSingleDigit_HEX(&Handler, 6, 0);
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2200      	movs	r2, #0
 8000ace:	2106      	movs	r1, #6
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fd4d 	bl	8000570 <TM1638_SetSingleDigit_HEX>
 8000ad6:	e00c      	b.n	8000af2 <main+0x16a>

	        	        	// TM1638_SetSingleDigit_HEX(&Handler, ' ', 0);
	        	        	// printf("Error scanning keys!\n");
	        	        }
	        	        else if((status==0)&& (keys == 64))
 8000ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d109      	bne.n	8000af2 <main+0x16a>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b40      	cmp	r3, #64	; 0x40
 8000ae2:	d106      	bne.n	8000af2 <main+0x16a>
	        	        	        			{

	        	        	        	        	 TM1638_SetSingleDigit_HEX(&Handler, 7, 0);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2107      	movs	r1, #7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd3f 	bl	8000570 <TM1638_SetSingleDigit_HEX>
	     HAL_Delay(100);
	     TM1638_SetSingleDigit_HEX(&Handler, i+6 , 12);
	     HAL_Delay(100);
	  	 TM1638_SetSingleDigit_HEX(&Handler, i+7, 14);*/

	  	HAL_Delay(100);
 8000af2:	2064      	movs	r0, #100	; 0x64
 8000af4:	f000 f9c2 	bl	8000e7c <HAL_Delay>
	   for (i = 0; i < 9; i++) {
 8000af8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000afc:	3301      	adds	r3, #1
 8000afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d986      	bls.n	8000a18 <main+0x90>
 8000b0a:	e781      	b.n	8000a10 <main+0x88>

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b090      	sub	sp, #64	; 0x40
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2228      	movs	r2, #40	; 0x28
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f848 	bl	8001bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b4a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fc4d 	bl	80013f4 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b60:	f000 f89e 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 feba 	bl	80018f8 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b8a:	f000 f889 	bl	8000ca0 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3740      	adds	r7, #64	; 0x40
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a37      	ldr	r2, [pc, #220]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc4:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0320 	and.w	r3, r3, #32
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a2b      	ldr	r2, [pc, #172]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_GPIO_Init+0xf8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c12:	4820      	ldr	r0, [pc, #128]	; (8000c94 <MX_GPIO_Init+0xfc>)
 8000c14:	f000 fbd5 	bl	80013c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <MX_GPIO_Init+0x100>)
 8000c1e:	f000 fbd0 	bl	80013c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c28:	481c      	ldr	r0, [pc, #112]	; (8000c9c <MX_GPIO_Init+0x104>)
 8000c2a:	f000 fbca 	bl	80013c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	4813      	ldr	r0, [pc, #76]	; (8000c94 <MX_GPIO_Init+0xfc>)
 8000c48:	f000 fa20 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_GPIO_Init+0x100>)
 8000c64:	f000 fa12 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_GPIO_Init+0x104>)
 8000c82:	f000 fa03 	bl	800108c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3720      	adds	r7, #32
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_MspInit+0x60>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_MspInit+0x60>)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d56:	f000 f875 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d6c:	f7ff fff7 	bl	8000d5e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d72:	490c      	ldr	r1, [pc, #48]	; (8000da4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d74:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d88:	4c09      	ldr	r4, [pc, #36]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d96:	f000 ff13 	bl	8001bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff fdf5 	bl	8000988 <main>
  bx lr
 8000d9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000da8:	08001c58 	.word	0x08001c58
  ldr r2, =_sbss
 8000dac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db0:	2000002c 	.word	0x2000002c

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_Init+0x28>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_Init+0x28>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f92b 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f000 f808 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff ff6a 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40022000 	.word	0x40022000

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x54>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f935 	bl	8001072 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f90b 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_InitTick+0x5c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_IncTick+0x1c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_IncTick+0x20>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a03      	ldr	r2, [pc, #12]	; (8000e64 <HAL_IncTick+0x20>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000028 	.word	0x20000028

08000e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b02      	ldr	r3, [pc, #8]	; (8000e78 <HAL_GetTick+0x10>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000028 	.word	0x20000028

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff fff0 	bl	8000e68 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffe0 	bl	8000e68 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff90 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff49 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff5e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff90 	bl	8000f7c <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5f 	bl	8000f28 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb0 	bl	8000fe0 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b08b      	sub	sp, #44	; 0x2c
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e169      	b.n	8001374 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a0:	2201      	movs	r2, #1
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8158 	bne.w	800136e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a9a      	ldr	r2, [pc, #616]	; (800132c <HAL_GPIO_Init+0x2a0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d05e      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010c8:	4a98      	ldr	r2, [pc, #608]	; (800132c <HAL_GPIO_Init+0x2a0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d875      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010ce:	4a98      	ldr	r2, [pc, #608]	; (8001330 <HAL_GPIO_Init+0x2a4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d058      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010d4:	4a96      	ldr	r2, [pc, #600]	; (8001330 <HAL_GPIO_Init+0x2a4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d86f      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010da:	4a96      	ldr	r2, [pc, #600]	; (8001334 <HAL_GPIO_Init+0x2a8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d052      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010e0:	4a94      	ldr	r2, [pc, #592]	; (8001334 <HAL_GPIO_Init+0x2a8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d869      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010e6:	4a94      	ldr	r2, [pc, #592]	; (8001338 <HAL_GPIO_Init+0x2ac>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d04c      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010ec:	4a92      	ldr	r2, [pc, #584]	; (8001338 <HAL_GPIO_Init+0x2ac>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d863      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010f2:	4a92      	ldr	r2, [pc, #584]	; (800133c <HAL_GPIO_Init+0x2b0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d046      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010f8:	4a90      	ldr	r2, [pc, #576]	; (800133c <HAL_GPIO_Init+0x2b0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d85d      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d82a      	bhi.n	8001158 <HAL_GPIO_Init+0xcc>
 8001102:	2b12      	cmp	r3, #18
 8001104:	d859      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <HAL_GPIO_Init+0x80>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	08001187 	.word	0x08001187
 8001110:	08001161 	.word	0x08001161
 8001114:	08001173 	.word	0x08001173
 8001118:	080011b5 	.word	0x080011b5
 800111c:	080011bb 	.word	0x080011bb
 8001120:	080011bb 	.word	0x080011bb
 8001124:	080011bb 	.word	0x080011bb
 8001128:	080011bb 	.word	0x080011bb
 800112c:	080011bb 	.word	0x080011bb
 8001130:	080011bb 	.word	0x080011bb
 8001134:	080011bb 	.word	0x080011bb
 8001138:	080011bb 	.word	0x080011bb
 800113c:	080011bb 	.word	0x080011bb
 8001140:	080011bb 	.word	0x080011bb
 8001144:	080011bb 	.word	0x080011bb
 8001148:	080011bb 	.word	0x080011bb
 800114c:	080011bb 	.word	0x080011bb
 8001150:	08001169 	.word	0x08001169
 8001154:	0800117d 	.word	0x0800117d
 8001158:	4a79      	ldr	r2, [pc, #484]	; (8001340 <HAL_GPIO_Init+0x2b4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800115e:	e02c      	b.n	80011ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e029      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	3304      	adds	r3, #4
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e024      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	3308      	adds	r3, #8
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e01f      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	330c      	adds	r3, #12
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e01a      	b.n	80011bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800118e:	2304      	movs	r3, #4
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e013      	b.n	80011bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d105      	bne.n	80011a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800119c:	2308      	movs	r3, #8
 800119e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	611a      	str	r2, [r3, #16]
          break;
 80011a6:	e009      	b.n	80011bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a8:	2308      	movs	r3, #8
 80011aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	615a      	str	r2, [r3, #20]
          break;
 80011b2:	e003      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x130>
          break;
 80011ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2bff      	cmp	r3, #255	; 0xff
 80011c0:	d801      	bhi.n	80011c6 <HAL_GPIO_Init+0x13a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	e001      	b.n	80011ca <HAL_GPIO_Init+0x13e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3304      	adds	r3, #4
 80011ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d802      	bhi.n	80011d8 <HAL_GPIO_Init+0x14c>
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	e002      	b.n	80011de <HAL_GPIO_Init+0x152>
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	3b08      	subs	r3, #8
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	210f      	movs	r1, #15
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	401a      	ands	r2, r3
 80011f0:	6a39      	ldr	r1, [r7, #32]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	431a      	orrs	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80b1 	beq.w	800136e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800120c:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001224:	4a48      	ldr	r2, [pc, #288]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a40      	ldr	r2, [pc, #256]	; (800134c <HAL_GPIO_Init+0x2c0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d013      	beq.n	8001278 <HAL_GPIO_Init+0x1ec>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3f      	ldr	r2, [pc, #252]	; (8001350 <HAL_GPIO_Init+0x2c4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d00d      	beq.n	8001274 <HAL_GPIO_Init+0x1e8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <HAL_GPIO_Init+0x2c8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x1e4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3d      	ldr	r2, [pc, #244]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_GPIO_Init+0x1e0>
 8001268:	2303      	movs	r3, #3
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 800126c:	2304      	movs	r3, #4
 800126e:	e004      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 8001270:	2302      	movs	r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 8001278:	2300      	movs	r3, #0
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127c:	f002 0203 	and.w	r2, r2, #3
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4093      	lsls	r3, r2
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800128a:	492f      	ldr	r1, [pc, #188]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	492c      	ldr	r1, [pc, #176]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4928      	ldr	r1, [pc, #160]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012bc:	4013      	ands	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	4922      	ldr	r1, [pc, #136]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60cb      	str	r3, [r1, #12]
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	491e      	ldr	r1, [pc, #120]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4918      	ldr	r1, [pc, #96]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_GPIO_Init+0x2d0>)
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	43db      	mvns	r3, r3
 800130a:	4914      	ldr	r1, [pc, #80]	; (800135c <HAL_GPIO_Init+0x2d0>)
 800130c:	4013      	ands	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d021      	beq.n	8001360 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_GPIO_Init+0x2d0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	490e      	ldr	r1, [pc, #56]	; (800135c <HAL_GPIO_Init+0x2d0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
 8001328:	e021      	b.n	800136e <HAL_GPIO_Init+0x2e2>
 800132a:	bf00      	nop
 800132c:	10320000 	.word	0x10320000
 8001330:	10310000 	.word	0x10310000
 8001334:	10220000 	.word	0x10220000
 8001338:	10210000 	.word	0x10210000
 800133c:	10120000 	.word	0x10120000
 8001340:	10110000 	.word	0x10110000
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	40010800 	.word	0x40010800
 8001350:	40010c00 	.word	0x40010c00
 8001354:	40011000 	.word	0x40011000
 8001358:	40011400 	.word	0x40011400
 800135c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	43db      	mvns	r3, r3
 8001368:	4909      	ldr	r1, [pc, #36]	; (8001390 <HAL_GPIO_Init+0x304>)
 800136a:	4013      	ands	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	3301      	adds	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f47f ae8e 	bne.w	80010a0 <HAL_GPIO_Init+0x14>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	372c      	adds	r7, #44	; 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d2:	787b      	ldrb	r3, [r7, #1]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d8:	887a      	ldrh	r2, [r7, #2]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	041a      	lsls	r2, r3, #16
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e272      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8087 	beq.w	8001522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001414:	4b92      	ldr	r3, [pc, #584]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b04      	cmp	r3, #4
 800141e:	d00c      	beq.n	800143a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001420:	4b8f      	ldr	r3, [pc, #572]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b08      	cmp	r3, #8
 800142a:	d112      	bne.n	8001452 <HAL_RCC_OscConfig+0x5e>
 800142c:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001438:	d10b      	bne.n	8001452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143a:	4b89      	ldr	r3, [pc, #548]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d06c      	beq.n	8001520 <HAL_RCC_OscConfig+0x12c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d168      	bne.n	8001520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e24c      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x76>
 800145c:	4b80      	ldr	r3, [pc, #512]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a7f      	ldr	r2, [pc, #508]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e02e      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b7b      	ldr	r3, [pc, #492]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7a      	ldr	r2, [pc, #488]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b78      	ldr	r3, [pc, #480]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a77      	ldr	r2, [pc, #476]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0xbc>
 8001496:	4b72      	ldr	r3, [pc, #456]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a71      	ldr	r2, [pc, #452]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6e      	ldr	r2, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 80014b0:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6a      	ldr	r2, [pc, #424]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b68      	ldr	r3, [pc, #416]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a67      	ldr	r2, [pc, #412]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fcca 	bl	8000e68 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fcc6 	bl	8000e68 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e200      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe4>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fcb6 	bl	8000e68 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fcb2 	bl	8000e68 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1ec      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x10c>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d063      	beq.n	80015f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152e:	4b4c      	ldr	r3, [pc, #304]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b08      	cmp	r3, #8
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x18c>
 8001546:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_RCC_OscConfig+0x176>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e1c0      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4939      	ldr	r1, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e03a      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fc6b 	bl	8000e68 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fc67 	bl	8000e68 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1a1      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4927      	ldr	r1, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc4a 	bl	8000e68 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc46 	bl	8000e68 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e180      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03a      	beq.n	8001678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d019      	beq.n	800163e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fc2a 	bl	8000e68 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fc26 	bl	8000e68 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e160      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_RCC_OscConfig+0x26c>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001636:	2001      	movs	r0, #1
 8001638:	f000 fa9c 	bl	8001b74 <RCC_Delay>
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fc10 	bl	8000e68 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164a:	e00f      	b.n	800166c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fc0c 	bl	8000e68 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d908      	bls.n	800166c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e146      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	42420000 	.word	0x42420000
 8001668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e9      	bne.n	800164c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a6 	beq.w	80017d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a87      	ldr	r2, [pc, #540]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b85      	ldr	r3, [pc, #532]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b82      	ldr	r3, [pc, #520]	; (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7e      	ldr	r2, [pc, #504]	; (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fbcd 	bl	8000e68 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fbc9 	bl	8000e68 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e103      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b75      	ldr	r3, [pc, #468]	; (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x312>
 80016f8:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e02d      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x334>
 800170e:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a69      	ldr	r2, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a66      	ldr	r2, [pc, #408]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	e01c      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x356>
 8001730:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a60      	ldr	r2, [pc, #384]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a5d      	ldr	r2, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 800174a:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a5a      	ldr	r2, [pc, #360]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a57      	ldr	r2, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d015      	beq.n	8001796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff fb7d 	bl	8000e68 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fb79 	bl	8000e68 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0b1      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ee      	beq.n	8001772 <HAL_RCC_OscConfig+0x37e>
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb67 	bl	8000e68 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fb63 	bl	8000e68 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e09b      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d061      	beq.n	80018ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d146      	bne.n	800187e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb37 	bl	8000e68 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff fb33 	bl	8000e68 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e06d      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d108      	bne.n	8001838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4921      	ldr	r1, [pc, #132]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a19      	ldr	r1, [r3, #32]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	430b      	orrs	r3, r1
 800184a:	491b      	ldr	r1, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fb07 	bl	8000e68 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff fb03 	bl	8000e68 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e03d      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x46a>
 800187c:	e035      	b.n	80018ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff faf0 	bl	8000e68 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff faec 	bl	8000e68 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e026      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x498>
 80018aa:	e01e      	b.n	80018ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e019      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x500>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0d0      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4965      	ldr	r1, [pc, #404]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0b8      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001954:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800195e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a52      	ldr	r2, [pc, #328]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001976:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	494d      	ldr	r1, [pc, #308]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d040      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e07f      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e073      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06b      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4936      	ldr	r1, [pc, #216]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff fa3e 	bl	8000e68 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff fa3a 	bl	8000e68 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e053      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d210      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4922      	ldr	r1, [pc, #136]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e032      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4916      	ldr	r1, [pc, #88]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	490e      	ldr	r1, [pc, #56]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a86:	f000 f821 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	490a      	ldr	r1, [pc, #40]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f99c 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08001c2c 	.word	0x08001c2c
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x30>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x36>
 8001afa:	e027      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afe:	613b      	str	r3, [r7, #16]
      break;
 8001b00:	e027      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0c5b      	lsrs	r3, r3, #17
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e004      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	613b      	str	r3, [r7, #16]
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4e:	613b      	str	r3, [r7, #16]
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	693b      	ldr	r3, [r7, #16]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	007a1200 	.word	0x007a1200
 8001b68:	08001c3c 	.word	0x08001c3c
 8001b6c:	08001c4c 	.word	0x08001c4c
 8001b70:	003d0900 	.word	0x003d0900

08001b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <RCC_Delay+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <RCC_Delay+0x38>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b90:	bf00      	nop
  }
  while (Delay --);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	60fa      	str	r2, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <RCC_Delay+0x1c>
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	10624dd3 	.word	0x10624dd3

08001bb0 <memset>:
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4402      	add	r2, r0
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d100      	bne.n	8001bba <memset+0xa>
 8001bb8:	4770      	bx	lr
 8001bba:	f803 1b01 	strb.w	r1, [r3], #1
 8001bbe:	e7f9      	b.n	8001bb4 <memset+0x4>

08001bc0 <__libc_init_array>:
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	2600      	movs	r6, #0
 8001bc4:	4d0c      	ldr	r5, [pc, #48]	; (8001bf8 <__libc_init_array+0x38>)
 8001bc6:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <__libc_init_array+0x3c>)
 8001bc8:	1b64      	subs	r4, r4, r5
 8001bca:	10a4      	asrs	r4, r4, #2
 8001bcc:	42a6      	cmp	r6, r4
 8001bce:	d109      	bne.n	8001be4 <__libc_init_array+0x24>
 8001bd0:	f000 f81a 	bl	8001c08 <_init>
 8001bd4:	2600      	movs	r6, #0
 8001bd6:	4d0a      	ldr	r5, [pc, #40]	; (8001c00 <__libc_init_array+0x40>)
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <__libc_init_array+0x44>)
 8001bda:	1b64      	subs	r4, r4, r5
 8001bdc:	10a4      	asrs	r4, r4, #2
 8001bde:	42a6      	cmp	r6, r4
 8001be0:	d105      	bne.n	8001bee <__libc_init_array+0x2e>
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
 8001be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001be8:	4798      	blx	r3
 8001bea:	3601      	adds	r6, #1
 8001bec:	e7ee      	b.n	8001bcc <__libc_init_array+0xc>
 8001bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf2:	4798      	blx	r3
 8001bf4:	3601      	adds	r6, #1
 8001bf6:	e7f2      	b.n	8001bde <__libc_init_array+0x1e>
 8001bf8:	08001c50 	.word	0x08001c50
 8001bfc:	08001c50 	.word	0x08001c50
 8001c00:	08001c50 	.word	0x08001c50
 8001c04:	08001c54 	.word	0x08001c54

08001c08 <_init>:
 8001c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0a:	bf00      	nop
 8001c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0e:	bc08      	pop	{r3}
 8001c10:	469e      	mov	lr, r3
 8001c12:	4770      	bx	lr

08001c14 <_fini>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	bf00      	nop
 8001c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1a:	bc08      	pop	{r3}
 8001c1c:	469e      	mov	lr, r3
 8001c1e:	4770      	bx	lr
